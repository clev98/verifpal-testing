// Off-the-Record Messaging Protocol V3

// TODO: Will need to find some open source implimentation 
// to ensure assumptions are correct.

attacker[passive]

// AKE
principal Bob[
    knows private c_salt, c_prime_salt
    knows private m1_salt, m1_prime_salt, m2_salt, m2_prime_salt
    // Alice and Bob's long term authentication public keys
    knows public pub_A, pub_B
    // r - Encryption key
    // x - DH factor
    generates r, x
    // keyid_B - serial number for DH key gx
    generates keyid_B
    gx = G^x
    gx_enc = ENC(r, gx)
    gx_hash = HASH(gx)
]

Bob -> Alice: gx_enc, gx_hash

principal Alice[
    knows private c_salt, c_prime_salt
    knows private m1_salt, m1_prime_salt, m2_salt, m2_prime_salt
    // Alice and Bob's long term authentication public keys
    knows public pub_A, pub_B
    // y - DH factor
    generates y
    // create seial number for GH key gy
    generates keyid_A
    gy = G^y
]

Alice -> Bob: gy

principal Bob[
    // s - DH key
    s_B = gy^x
    // AES keys
    c_B = HASH(c_salt, s_B)
    c_prime_B = HASH(c_prime_salt, s_B)
    // MAC keys
    m1_B = HASH(m1_salt, s_B)
    m1_prime_B = HASH(m1_prime_salt, s_B)
    m2_B = HASH(m2_salt, s_B)
    m2_prime_B = HASH(m2_prime_salt, s_B)

    M_B = MAC(m1_B, CONCAT(gx, gy, pub_B, keyid_B))
    // I think this is correct? 
    X_B = CONCAT(pub_B, keyid_B, SIGN(pub_B, M_B))
    X_B_Enc = ENC(c_B, X_B)
    X_B_Enc_Mac = MAC(m2_B, X_B_Enc)
]

Bob -> Alice: r, X_B_Enc, X_B_Enc_Mac

principal Alice[
    gx_dec = DEC(r, gx_enc)

    // Verify gx hasn't been tampered with
    macValid1 = ASSERT(HASH(gx_dec), gx_hash)?

    // Create shared key
    s_A = gx_dec^y

    // AES keys
    c_A = HASH(c_salt, s_A)
    c_prime_A = HASH(c_prime_salt, s_A)
    // MAC keys
    m1_A = HASH(m1_salt, s_A)
    m1_prime_A = HASH(m1_prime_salt, s_A)
    m2_A = HASH(m2_salt, s_A)
    m2_prime_A = HASH(m2_prime_salt, s_A)

    // Verify X_B MAC from Bob == MAC(X_B_Enc)
    macValid2 = ASSERT(MAC(m2_A, X_B_Enc), X_B_Enc_Mac)?

    // Decrypt Bob's message
    X_B_Dec = DEC(c_A, X_B_Enc)

    // Extract information
    pub_B_Dec, keyid_B_Dec, sig_B_Dec = SPLIT(X_B_Dec)

    // Alice creates own M_B with same information 
    M_B_Alice = MAC(m1_A, CONCAT(gx_dec, gy, pub_B_Dec, keyid_B_Dec))

    // Assert Bob's send M_B == Alice's M_B
    sigValid1 = ASSERT(SIGN(pub_B_Dec, M_B_Alice), sig_B_Dec)?
    //sigValid1 = SIGNVERIF(pub_B_Dec, M_B_Alice, sig_B_Dec)?

    // Create MAC of key information for Bob
    M_A = MAC(m1_prime_A, CONCAT(gy, gx_dec, pub_A, keyid_A))

    // Create key information message for Bob
    X_A = CONCAT(pub_A, keyid_A, SIGN(pub_A, M_A))
    X_A_Enc = ENC(c_prime_A, X_A)
    X_A_Enc_Mac = MAC(m2_prime_A, X_A_Enc)
]

Alice -> Bob: X_A_Enc, X_A_Enc_Mac

principal Bob[
    // Verify X_A has not be altered
    macValid3 = ASSERT(MAC(m2_prime_B, X_A_Enc), X_A_Enc_Mac)?

    // Decrypt X_A and extract key info
    X_A_Dec = DEC(c_prime_B, X_A_Enc)
    pub_A_Dec, keyid_A_Dec, sig_A_Dec = SPLIT(X_A_Dec)

    // Verify M_A has not been altered
    M_A_Bob = MAC(m1_prime_B, CONCAT(gy, gx, pub_A_Dec, keyid_A_Dec))
    sigValid2 = ASSERT(SIGN(pub_A_Dec, M_A_Bob), sig_A_Dec)?
    //sigValid2 = SIGNVERIF(pub_A_Dec, M_A_Bob, sig_A_Dec)?
]

phase[1]

// Sending a message
principal Alice[
    generates msg
    generates ctr_A
    generates next_dh_A
    // This is some handwaving to avoid OTR's very complicated ephemeral key generation
    knows private ek
    knows private mk
    T_A = CONCAT(keyid_A, keyid_B_Dec, next_dh_A, ctr_A, ENC(CONCAT(ek, ctr_A), msg))
    T_A_Mac = MAC(mk, T_A)
]

Alice -> Bob: T_A, T_A_Mac

principal Bob[
    // This is some handwaving to avoid OTR's very complicated ephemeral key generation
    knows private ek
    knows private mk
    keyid_A_msg, keyid_B_msg, next_dh_A_msg, crt_A_msg, msg_enc = SPLIT(T_A)
    macValid4 = ASSERT(MAC(mk, T_A), T_A_Mac)?
    msg_dec = DEC(CONCAT(ek, crt_A_msg), msg_enc)
]

queries[
    confidentiality? msg
    authentication? Alice -> Bob: T_A
]
